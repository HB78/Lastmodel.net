üîÑ Flux d√©taill√©
1
Client envoie :
{ email: "john@test.com", name: " john DOE " }
2
Hook intercepte et modifie :
{ email: "john@test.com", name: "John Doe" }
3
Better-Auth re√ßoit :
{ email: "john@test.com", name: "John Doe" }
Better-Auth ne voit jamais les donn√©es originales !

4
Sauv√© en base :
{ id: "user_123", email: "john@test.com", name: "John Doe" }
5
Dans la session :
{ userId: "user_123", name: "John Doe", email: "john@test.com" }
‚ùå Ce que le hook NE fait PAS
‚Ä¢ Il n'affiche rien √† l'utilisateur
‚Ä¢ Il ne cr√©e pas de nouveau champ
‚Ä¢ Il ne log rien automatiquement
‚Ä¢ Il n'est pas visible dans les dev tools
‚úÖ Ce que le hook fait
‚Ä¢ Il remplace les donn√©es pour Better-Auth
‚Ä¢ Il nettoie/valide les inputs
‚Ä¢ Il transforme avant sauvegarde
‚Ä¢ Il agit comme un filtre invisible
üîç Comment voir l'effet du hook ?
1.
Dans la base de donn√©es :
Le nom sera sauv√© normalis√© (sans espaces en trop, casse correcte)

2.
Dans la session utilisateur :
user.name sera la version nettoy√©e

3.
Dans votre interface :
Quand vous affichez le nom, il sera proprement format√©